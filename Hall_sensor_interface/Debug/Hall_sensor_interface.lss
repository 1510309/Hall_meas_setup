
Hall_sensor_interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000038a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000316  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800100  00800100  0000038a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000079c  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000035d  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e9  00000000  00000000  00000f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00001280  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000344  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000038f  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00001aab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_18>
  4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 34       	cpi	r26, 0x45	; 69
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  88:	0c 94 89 01 	jmp	0x312	; 0x312 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
 */ 

#include <avr/io.h>

void initADC(void){
	PRR &= ~_BV(PRADC);
  90:	e4 e6       	ldi	r30, 0x64	; 100
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	80 83       	st	Z, r24
	ADMUX = _BV(REFS0);
  9a:	80 e4       	ldi	r24, 0x40	; 64
  9c:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
  a0:	87 e8       	ldi	r24, 0x87	; 135
  a2:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0x00;
  a6:	10 92 7b 00 	sts	0x007B, r1
	DIDR0 = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	80 93 7e 00 	sts	0x007E, r24
  b0:	08 95       	ret

000000b2 <readADC>:
}

uint16_t readADC(uint8_t channel){
	ADMUX = ((ADMUX & 0xF0) | channel);
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	90 7f       	andi	r25, 0xF0	; 240
  ba:	89 2b       	or	r24, r25
  bc:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADSC);
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
	while (ADCSRA & _BV(ADSC));
  c8:	80 81       	ld	r24, Z
  ca:	86 fd       	sbrc	r24, 6
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <readADC+0x16>
	return ADC;
  ce:	80 91 78 00 	lds	r24, 0x0078
  d2:	90 91 79 00 	lds	r25, 0x0079
}
  d6:	08 95       	ret

000000d8 <main>:
#include "adc.h"
#include "uart.h"



int main(void){
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
  e0:	27 97       	sbiw	r28, 0x07	; 7
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	f8 94       	cli
  e6:	de bf       	out	0x3e, r29	; 62
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	cd bf       	out	0x3d, r28	; 61
	initADC();
  ec:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );
  f0:	87 e6       	ldi	r24, 0x67	; 103
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 1a 01 	call	0x234	; 0x234 <uart_init>
	char buffer[7];
    DDRB |= _BV(PB5);
  f8:	25 9a       	sbi	0x04, 5	; 4
	sei();
  fa:	78 94       	sei
    while (1){
		uint16_t adc_value_x = readADC(ADC0);
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 59 00 	call	0xb2	; 0xb2 <readADC>
 102:	8c 01       	movw	r16, r24
		uint16_t adc_value_y = readADC(ADC3);
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	0e 94 59 00 	call	0xb2	; 0xb2 <readADC>
 10a:	7c 01       	movw	r14, r24
		
		if ((adc_value_x < (512 - THRESHOLD_VAL) || adc_value_x > (512 + THRESHOLD_VAL)) || (adc_value_y < (512 - THRESHOLD_VAL) || adc_value_y > (512 + THRESHOLD_VAL))){
 10c:	c8 01       	movw	r24, r16
 10e:	8b 5f       	subi	r24, 0xFB	; 251
 110:	91 40       	sbci	r25, 0x01	; 1
 112:	0b 97       	sbiw	r24, 0x0b	; 11
 114:	28 f4       	brcc	.+10     	; 0x120 <main+0x48>
 116:	c7 01       	movw	r24, r14
 118:	8b 5f       	subi	r24, 0xFB	; 251
 11a:	91 40       	sbci	r25, 0x01	; 1
 11c:	0b 97       	sbiw	r24, 0x0b	; 11
 11e:	10 f0       	brcs	.+4      	; 0x124 <main+0x4c>
			PORTB |= _BV(PB5);
 120:	2d 9a       	sbi	0x05, 5	; 5
 122:	01 c0       	rjmp	.+2      	; 0x126 <main+0x4e>
		}else{
			PORTB &= ~_BV(PB5);
 124:	2d 98       	cbi	0x05, 5	; 5
		}
		
		uart_putc('X');
 126:	88 e5       	ldi	r24, 0x58	; 88
 128:	0e 94 33 01 	call	0x266	; 0x266 <uart_putc>
		uart_putc(' ');
 12c:	80 e2       	ldi	r24, 0x20	; 32
 12e:	0e 94 33 01 	call	0x266	; 0x266 <uart_putc>
		uart_puts(ultoa(adc_value_x,buffer,10));
 132:	b8 01       	movw	r22, r16
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
 138:	2a e0       	ldi	r18, 0x0A	; 10
 13a:	ae 01       	movw	r20, r28
 13c:	4f 5f       	subi	r20, 0xFF	; 255
 13e:	5f 4f       	sbci	r21, 0xFF	; 255
 140:	0e 94 57 01 	call	0x2ae	; 0x2ae <__ultoa_ncheck>
 144:	0e 94 48 01 	call	0x290	; 0x290 <uart_puts>
		uart_putc('\n');
 148:	8a e0       	ldi	r24, 0x0A	; 10
 14a:	0e 94 33 01 	call	0x266	; 0x266 <uart_putc>
		uart_putc('\r');
 14e:	8d e0       	ldi	r24, 0x0D	; 13
 150:	0e 94 33 01 	call	0x266	; 0x266 <uart_putc>
		
		uart_putc('Y');
 154:	89 e5       	ldi	r24, 0x59	; 89
 156:	0e 94 33 01 	call	0x266	; 0x266 <uart_putc>
		uart_putc(' ');
 15a:	80 e2       	ldi	r24, 0x20	; 32
 15c:	0e 94 33 01 	call	0x266	; 0x266 <uart_putc>
		uart_puts(ultoa(adc_value_y,buffer,10));
 160:	b7 01       	movw	r22, r14
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	2a e0       	ldi	r18, 0x0A	; 10
 168:	ae 01       	movw	r20, r28
 16a:	4f 5f       	subi	r20, 0xFF	; 255
 16c:	5f 4f       	sbci	r21, 0xFF	; 255
 16e:	0e 94 57 01 	call	0x2ae	; 0x2ae <__ultoa_ncheck>
 172:	0e 94 48 01 	call	0x290	; 0x290 <uart_puts>
		uart_putc('\n');
 176:	8a e0       	ldi	r24, 0x0A	; 10
 178:	0e 94 33 01 	call	0x266	; 0x266 <uart_putc>
		uart_putc('\r');
 17c:	8d e0       	ldi	r24, 0x0D	; 13
 17e:	0e 94 33 01 	call	0x266	; 0x266 <uart_putc>
		
		//_delay_ms(50);
    }
 182:	bc cf       	rjmp	.-136    	; 0xfc <main+0x24>

00000184 <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	ef 93       	push	r30
 196:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 198:	80 91 c0 00 	lds	r24, 0x00C0
    data = UART0_DATA;
 19c:	20 91 c6 00 	lds	r18, 0x00C6
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
 1a0:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 1a2:	e0 91 02 01 	lds	r30, 0x0102
 1a6:	ef 5f       	subi	r30, 0xFF	; 255
 1a8:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 1aa:	90 91 01 01 	lds	r25, 0x0101
 1ae:	e9 17       	cp	r30, r25
 1b0:	39 f0       	breq	.+14     	; 0x1c0 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 1b2:	e0 93 02 01 	sts	0x0102, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	eb 5f       	subi	r30, 0xFB	; 251
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	20 83       	st	Z, r18
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 1c0:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 1c2:	90 91 00 01 	lds	r25, 0x0100
 1c6:	89 2b       	or	r24, r25
 1c8:	80 93 00 01 	sts	0x0100, r24
}
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	ef 93       	push	r30
 1f0:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 1f2:	90 91 04 01 	lds	r25, 0x0104
 1f6:	80 91 03 01 	lds	r24, 0x0103
 1fa:	98 17       	cp	r25, r24
 1fc:	69 f0       	breq	.+26     	; 0x218 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 1fe:	e0 91 03 01 	lds	r30, 0x0103
 202:	ef 5f       	subi	r30, 0xFF	; 255
 204:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 206:	e0 93 03 01 	sts	0x0103, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	eb 5d       	subi	r30, 0xDB	; 219
 20e:	fe 4f       	sbci	r31, 0xFE	; 254
 210:	80 81       	ld	r24, Z
 212:	80 93 c6 00 	sts	0x00C6, r24
 216:	05 c0       	rjmp	.+10     	; 0x222 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 218:	e1 ec       	ldi	r30, 0xC1	; 193
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	8f 7d       	andi	r24, 0xDF	; 223
 220:	80 83       	st	Z, r24
    }
}
 222:	ff 91       	pop	r31
 224:	ef 91       	pop	r30
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 234:	10 92 04 01 	sts	0x0104, r1
    UART_TxTail = 0;
 238:	10 92 03 01 	sts	0x0103, r1
    UART_RxHead = 0;
 23c:	10 92 02 01 	sts	0x0102, r1
    UART_RxTail = 0;
 240:	10 92 01 01 	sts	0x0101, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
 244:	99 23       	and	r25, r25
 246:	1c f4       	brge	.+6      	; 0x24e <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
 248:	22 e0       	ldi	r18, 0x02	; 2
 24a:	20 93 c0 00 	sts	0x00C0, r18
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 24e:	90 78       	andi	r25, 0x80	; 128
 250:	90 93 c5 00 	sts	0x00C5, r25
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
 254:	80 93 c4 00 	sts	0x00C4, r24
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
 258:	88 e9       	ldi	r24, 0x98	; 152
 25a:	80 93 c1 00 	sts	0x00C1, r24
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
 25e:	86 e0       	ldi	r24, 0x06	; 6
 260:	80 93 c2 00 	sts	0x00C2, r24
 264:	08 95       	ret

00000266 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 266:	20 91 04 01 	lds	r18, 0x0104
 26a:	2f 5f       	subi	r18, 0xFF	; 255
 26c:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 26e:	90 91 03 01 	lds	r25, 0x0103
 272:	29 17       	cp	r18, r25
 274:	e1 f3       	breq	.-8      	; 0x26e <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 276:	e2 2f       	mov	r30, r18
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	eb 5d       	subi	r30, 0xDB	; 219
 27c:	fe 4f       	sbci	r31, 0xFE	; 254
 27e:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 280:	20 93 04 01 	sts	0x0104, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 284:	e1 ec       	ldi	r30, 0xC1	; 193
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	80 62       	ori	r24, 0x20	; 32
 28c:	80 83       	st	Z, r24
 28e:	08 95       	ret

00000290 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	ec 01       	movw	r28, r24
    while (*s) 
 296:	88 81       	ld	r24, Y
 298:	88 23       	and	r24, r24
 29a:	31 f0       	breq	.+12     	; 0x2a8 <uart_puts+0x18>
 29c:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
 29e:	0e 94 33 01 	call	0x266	; 0x266 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 2a2:	89 91       	ld	r24, Y+
 2a4:	81 11       	cpse	r24, r1
 2a6:	fb cf       	rjmp	.-10     	; 0x29e <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <__ultoa_ncheck>:
 2ae:	bb 27       	eor	r27, r27

000002b0 <__ultoa_common>:
 2b0:	fa 01       	movw	r30, r20
 2b2:	a6 2f       	mov	r26, r22
 2b4:	62 17       	cp	r22, r18
 2b6:	71 05       	cpc	r23, r1
 2b8:	81 05       	cpc	r24, r1
 2ba:	91 05       	cpc	r25, r1
 2bc:	33 0b       	sbc	r19, r19
 2be:	30 fb       	bst	r19, 0
 2c0:	66 f0       	brts	.+24     	; 0x2da <__ultoa_common+0x2a>
 2c2:	aa 27       	eor	r26, r26
 2c4:	66 0f       	add	r22, r22
 2c6:	77 1f       	adc	r23, r23
 2c8:	88 1f       	adc	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	aa 1f       	adc	r26, r26
 2ce:	a2 17       	cp	r26, r18
 2d0:	10 f0       	brcs	.+4      	; 0x2d6 <__ultoa_common+0x26>
 2d2:	a2 1b       	sub	r26, r18
 2d4:	63 95       	inc	r22
 2d6:	38 50       	subi	r19, 0x08	; 8
 2d8:	a9 f7       	brne	.-22     	; 0x2c4 <__ultoa_common+0x14>
 2da:	a0 5d       	subi	r26, 0xD0	; 208
 2dc:	aa 33       	cpi	r26, 0x3A	; 58
 2de:	08 f0       	brcs	.+2      	; 0x2e2 <__ultoa_common+0x32>
 2e0:	a9 5d       	subi	r26, 0xD9	; 217
 2e2:	a1 93       	st	Z+, r26
 2e4:	36 f7       	brtc	.-52     	; 0x2b2 <__ultoa_common+0x2>
 2e6:	b1 11       	cpse	r27, r1
 2e8:	b1 93       	st	Z+, r27
 2ea:	10 82       	st	Z, r1
 2ec:	ca 01       	movw	r24, r20
 2ee:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <strrev>

000002f2 <strrev>:
 2f2:	dc 01       	movw	r26, r24
 2f4:	fc 01       	movw	r30, r24
 2f6:	67 2f       	mov	r22, r23
 2f8:	71 91       	ld	r23, Z+
 2fa:	77 23       	and	r23, r23
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <strrev+0x4>
 2fe:	32 97       	sbiw	r30, 0x02	; 2
 300:	04 c0       	rjmp	.+8      	; 0x30a <strrev+0x18>
 302:	7c 91       	ld	r23, X
 304:	6d 93       	st	X+, r22
 306:	70 83       	st	Z, r23
 308:	62 91       	ld	r22, -Z
 30a:	ae 17       	cp	r26, r30
 30c:	bf 07       	cpc	r27, r31
 30e:	c8 f3       	brcs	.-14     	; 0x302 <strrev+0x10>
 310:	08 95       	ret

00000312 <_exit>:
 312:	f8 94       	cli

00000314 <__stop_program>:
 314:	ff cf       	rjmp	.-2      	; 0x314 <__stop_program>
